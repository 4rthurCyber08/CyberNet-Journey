A dictionary is an unordered list of key-value pairs. Some characteristics of a dictionary are they are mutable, can grow and shrink as needed, and can be nested. To define a dictionary, you use curly braces {} to open and close the dictionary and the information inside the dictionary is represented by a key and value separated by a colon (:). A key can be any immutable object, such as a string, integer, float or Boolean, but it cannot be a list or another dictionary because they are mutable. The value of each key value pair is mutable, so it can be any object type. The following is an example of a dictionary.

- 01
- 02

Let's discuss how to access and modify a dictionary’s keys and values. To access or modify values, you use their keys. The examples show how to retrieve a value, add a key value pair, and change a key's value. Let's discuss each one in more detail.

The top example shows how to access a key's value. The example dictionary named router includes the keys vendor, DeviceID, and Location. To access the value for the key "vendor", use the following command.

>>> router["vendor"]
'Cisco'

Using the dictionary name with the key inside square brackets ([]) will retrieve that key's value. If you use a key that is not in the dictionary, the dictionary will return a KeyError error. The error message is shown in the second example. If returning an error when you use an undefined key is not the desired result, you can avoid this by using dictionary methods to get the value instead.

The third example shows how to add a new key:value pair to a dictionary.

>>> router['OS'] = 'IOS-XE'

Place the key you want to add inside the square brackets and the value of that key after the equal sign.

{'vendor':'Cisco', 'DeviceID':'3800', 'Location':'San Jose', 'OS':'IOS-XE'}

Note that the new key:value pair 'OS':'IOS-XE' was added to the end of the dictionary.

The last example shows how to change the value of a key.

>>> router['Location'] = 'Dallas'

This command is similar to adding a key:value pair except that it uses a key that already exists; therefore, it just changes the value.

{'vendor':'Cisco', 'DeviceID':'3800', 'Location':'Dallas'}

Building from an Empty Dictionary

Sometimes you start with a blank dictionary and want to build it from scratch. The example shows how to do this. Using what you’ve learned to add key:value pairs, you can build any dictionary. From Python 3.6 onward, dictionaries maintain insertion order by default, so they will appear in the dictionary in the order you add them.

- 03

Let’s examine the methods you can use on dictionaries. Remember, methods are functions that are available for a given object.

The example shows the get(), items(), keys() and values() methods.

    .get(): Retrieves the value of a given key. Recall the earlier KeyError when attempting to access the value of a key not in the dictionary. The get() method will return a value of ‘None’ instead of an error.

    .items(): Returns the keys and values in a tuple form in a list

    .keys(): Returns all the keys in a list format

    .values(): Returns all the values in a list format
	
-04

The last dictionary methods you will cover are pop(), update() and clear().

    .pop(): Removes a specified key from a dictionary and returns that key’s value. If the key is not found and no default value is given, a KeyError is raised.

    .update(): Merges two dictionaries. In the example, dictionary switch1 is merged into switch. If a key in switch1 is not in switch, it will be created. If both dictionaries have the same key, the key value in switch will be updated to the new value. A dictionary cannot contain multiples of the same key.

    .clear(): Clears the dictionary and makes it empty.
	