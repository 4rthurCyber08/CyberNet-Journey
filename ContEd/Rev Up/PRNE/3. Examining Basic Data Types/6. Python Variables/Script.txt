 Python Variables

The easiest way to understand variables is to think of them as named containers that store data. The data stored could be a number, string, list, or dictionary. In Python, unlike a lot of languages, you do not have to specify the assigned variableâ€™s data type.

- 01

In Python, because the variable's data type does not have to be defined, it is known as a loosely typed language. Being a loosely typed language makes Python easy to code, adding to its popularity, but it can also cause problems. The most common issue is attempting to use a method on a variable of an incompatible data type. An example of this problem is believing a variable has an integer assigned to it, but it is a string instead. Integer methods cannot be used on strings.

To assign data to a variable, you use the equals (=) operator. Some examples are x = 5 or switch_os = "IOS-XE". Two equals operators (= =) do not assign data to a variable, but are used as a comparison, a topic that will be covered later.

Variable names follow the Python PEP 8 naming standard. Some of these standards are listed.

    Variable names are case-sensitive.

    Variable names can be a single letter or one or more words.

    Variable names cannot start with a number.

    Variable names with more than one word use the underscore (_) to separate the words.

    Variable names should be self-explanatory, as long as they are not too long.

    Variable names cannot be Python keywords. Python keywords are reserved words with special meanings; using a keyword as a variable will cause a syntax error. A list of keywords can be found at https://docs.python.org/3.8/reference/lexical_analysis.html#keywords.

There are two types of variables, global and local variables, defined by their scope. Global variables can be used throughout your code, while local variables are limited to the scope to the function where they are declared.

- 02

In Python variables point to pyObjects. The pyObject is stored in memory and holds information about the data bound to the variables such as the data type the value and a ref count. The ref count is the number of variables or names that point to the pyObject.

In the example above you will see that the variable x has been assigned the integer 100 and the variable y has been assigned an integer 200. Two pyObjects were made one for the object bound to x and one for the object bound to y. Both pyObjects have a ref count of one because one variable is pointing to each.

You can see that the two pyObjects are located in different locations in memory by using the id() function. The id() function gives you the memory location of the object you pass it.

>>> id(x)
1944305292752
>>>id(y)
1944305296016

The key thing to know is that the pyObject is stored in memory but the variables x and y are not bound to the memory location, they just point to the pyObject that is stored in memory.

- 03

What happens if you reassign y from 200 to 100? Since y is now assigned a value of 100 and that information is the same as a pyObject already stored in memory a new pyObject is not made. Looking at the slide above you will see that the variable y was removed from the pyObject it was point to. That pyObjects reference count was changed to zero since y does not point to it anymore. The variable y was then pointed to the pyObject that x is pointing at. Since x and y are both pointing to the same pyObject, its reference count changes to two. Any ref count that has a value of zero will be cleaned up by garbage collection.