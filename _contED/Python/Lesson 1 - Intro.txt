Introduction Python
	-Open Source
		Community-driven development
		- hg.python.org (soon git.python.org)
		- bugs.python.org
		- mail.python.org
			python-dev, python-ideas, python-list
		- Python Enhancement Proposals (PEPs)
			https://www.python.org/dev/peps/
		
	-Interpreted
		Execute your code directly:
		- python3 mycode.py
		No need to compile it
		- automatically compiled into intermediate bytecode (.pyc)
		Excecutable (.exe) can be created but usually aren't
	
	-High Level
		Very expressive language
		Write less, do more
		Many libraries and tools already available

	-General-purpose
		Web Development
		System Administration
		Network Programming
		GUI Development
		Scientific Computing
		Artificial Intelligence
		Embedding
		Gaming
		etc.
	
	-Cross-platform
		Linux, Windows, Mac, etc.,
		most libraries are cross-platform
		some are platform-specific

	-Multi-Paradigm
		Supports several paradigms, including:
		- imperative/procedural
		- object-oriented
		- functional
		Use the most suitable for the task at hand
	
	-Strong and Dynamic typed
		Gives error for ambigious or nonsensical operations
		- e.g. 'foo' + 10 , [1, 2, 3] / 5
		No need to declare the types
		- e.g. x = 10 instead of int x = 10;
	 
	-Case sensitive
		print() != Print()


History
	Created by Guido van Rossum
	- Dutch computer programmer
	- BDFL (Benevolent Dictator for Life)
	- worked for google now for Dropbox
	- Named after the Monty Python's Flying Circus Show

	Created in Dec 1989
	First release in 1991
	Py 1 - 1994
	Py 2 - 2000
	Py 3 - 2008

	Python 2
	- Last ver is 2.7 (July 2010)
	Python 3
	- all strings are now Unicode
	- clear separation between strings and bytes
	- int/int returns float
	- not compatible with Python 2
	- actively developed

Philosophy
	- 20 aphorisms, only 19 written down	
	- written by Tim Peters in PEP 20
	- summarizes the philosophy of python
	
	when in doubt: import this (or do python -m this)

Python Style Guide (PEP 8)
	Programs must be written for people to read, and only incidentally for machines to excecute. -Abelson/Sussman
	Readability Counts -Tim Peters, the Zen of Python
	
	
	*Help you write consistend and readable code
		indent with 4 spaces
		never use tab characters
		max 79 chars per line
			-Flat is better than nested
			-Sparse is better than dense
		use CamelCase for class names
		lowercase or lower_with_underscore for the rest, avoid mixedCase
		one statement per line