Sequences

Sequences
	Text: str
	Basic: tuple, list
	Binary: bytes, bytearray, memoryview
	Range: range
	
	
	Tuples	()	//the parentheses
		immutable sequence of heterogeneous elements
			immutable: the content can not change
			Heterogeneous: it can contain different types
			
		type tuple:(), ('a', 1), (42, 3.14, 5j)
		
		for one element: still add a coma (5,)
		
		elements usually accessed via unpacking or indexing
		similar to C structs
	Lists	[]	
		mutable sequence of heterogeneous elements
			mutable: can change content
		
		type list: [], [2.5, 3.5], [1 ,2 ,3]
		
		for one element: [5] no need for coma
		
		list('Hello')
			['H', 'e', 'l', 'l', 'o']
		
		elements usually accessed via iteration
		similar to C arrays
	
	bytes: b'\xFF\x10', b'abc'
		immutable seq of bytes
	bytearray
		mutable seq of bytes
	memoryview
		creates a view of a bytes-like object
	range
		represents an immutable seq of ints, with a start, stop, and step

Sequence Operations
	Concatenation: 
		seq1 + seq2
			'seq1seq2'
		[1, 2, 3] + [2, 1]
			[1, 2, 3, 2, 1]
		('p', 'i') + (3, 1, 4, 1, 5)
			('p', 'i', 3, 1, 4, 1, 5)
		'Py' + ['th', 'on']
			TypeError
		(1, 2) + [1, 2]
			TypeEror
		(1, 2) + tubple([1, 2])
			(1, 2, 1, 2)
			
	Repetition: seq * n
		'Py' * 2
			PyPy
		[1, 0, 1] * 3
			[1, 0, 1, 1, 0, 1, 1, 0, 1]
		have to multiply using int not float
		
	Containment: elem in seq, elem not in seq
		'Py' in 'Python'
			True
		'Pt' in 'Python'
			False
		(1,) in [(1, 2), (3, 4)]
			False
			
	Indexing seq[i]
		s = 'Python'
		s[0]
			'P'
		s[5]
			'n'
		s[-1]
			'n'
		s[-2]
			'o'
		s[6]
			IndexError
		
	Slicing seq[start:stop], seq[start:stop:step]
		return a slice
		from start(included) to stop(excluded)
		start and stop can be out of range
		start and stop can be omitted
			seq[start:] from start to the end
			seq[:stop] from the beginning to stop
			seq[:] return a copy of seq
		
		ex.
			s = 'Python'
			s[0:2]
				'Py'
			s[2:6]
				'thon'
			s[:2]
				'Py'
			s[2:]
				'thon'
			s[-2: -4]
				''
				
		seq[start:stop:step]
			step - default is 1. step 2 will output every other elem starting from the first.
				step 3 will output every 3rd elem starting from the first.
				
	Length len(seq) returns the number of elements
		len('Python')
			6
		
	Minimum and maximum min(seq), max(seq)
		min - returns the smallest item of seq
			seq = [5, 8, -2, 36, 12]
			min(seq)
				-2
			max(seq)
				36
			s = Python
			min(s)
				'P'
			max(s)
				'y'
			
		max - returns the biggest item of seq
		
	Lexicographic order
		All char follow an order
		For ASCII char
			!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'
			abcdefghijklmnopqrstuvwxyz{|}~
	
	PEP 8
	Style conventions for sequences:
		OK: (1, 2, 3), [1, 2, 3]
		OK: [(3, 5), (2, 7), (1, -6)]
		Acceptable: [(3,5), (2,7), (1,-6)]
		NOT OK: [1,2,3], [ 1, 2, 3], [1 ,2,3]