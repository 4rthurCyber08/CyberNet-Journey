 List Analysis

Lists are a grouping of objects stored in a single variable.

Lists have several traits:

    Start and end with square brackets [ ]

    Are ordered

    Contain any object

    Can be indexed

    Are mutable

    Are dynamic

A list is written as a group of objects separated by commas and surrounded by square brackets [].

- 01

Lists you might use in networking may resemble these examples:

devices = ["router1", "router2", "router3", "switch1", "switch2", "firewall1"]
commands = ["show run", "show ip interface brief", "show vlan"] 

While the examples show lists of strings, you can put objects of any data type in a list. Lists are ordered, changeable, and can have duplicate values. Ordered means that objects will always stay in the order in which they were added to the list. Changeable means that you can add or remove objects from the list. Lists can have duplicate values because objects in a list are assigned an index number.

The index assigns a number to each object in the list. The first object is assigned a zero (0), the next is assigned one (1), continuing until you reach the end of the list. Lists also have reverse indices that start at the end of the list and work backwards to the beginning. The last object in the list is assigned an index of negative one (-1), next to the last is a negative two (-2), continuing until you reach the first object in the list. The example shows the forward and backward indices of a list.

-5
	

-4
	

-3
	

-2
	

-1

"router1"
	

"router2"
	

"router3"
	

"router4"
	

"router5"

0
	

1
	

2
	

3
	

4

Since each object in a list has an index, you can retrieve an object from a specific location. The code to retrieve an object from an index is simple.

>>> devices = ["router1", "router2", "switch1", 5]
>>> devices[2]
'switch1'

This first example shows how to retrieve an object using the index from left to right, starting from the front of the list. You use index 2 to retrieve "switch1". Keep in mind that the index system starts with 0.

>>> devices = ["router1", "router2", "switch1", 5]
>>> devices[-3]
'router2'

The second example shows how to retrieve an object using the index from right to left, starting from the end of the list. You use index -3 to retrieve "router2".

Letâ€™s examine some methods that allow you to add, remove, and count objects in a list.

- 02

You can add objects to a list in multiple ways. The first way is to add an object to the end of the list. The second way is to add objects at a specific location in the list.

To add an object to the end of the list, use the append method. The syntax is list_name.append(object_name).

>>> devices = ["router1", "router2", "router3"]
>>> devices.append("switch1")
>>> devices
["router1", "router2", "router3", "switch1"]

To add an object at a specific location in the list, use the insert method. The insert method has two parameters; the first is the index location where you want to add to the object and the second is the object you want to add. The syntax is: list_name.insert(index_number, object_name).

>>> devices = ["router1", "router2", "router3", "switch1"]
>>> devices.insert(3, "router4")
>>> devices
["router1", "router2", "router3", "router4", "switch1"]

- 03

Removing objects from a list can be achieved in three different ways. You can remove the last object in the list, remove an object at a specific index, or remove a specific object.

To remove the last object in the list, use the pop method:

>>> devices = ["router1", "router2", "router3", "router4", "switch1"]
>>> devices.pop()
'switch1'
>>> devices
["router1", "router2", "router3",  "router4"]

To remove an object at a specific index, use the pop method with the index number as a parameter. The syntax is: pop(index_number):

>>> devices = ["router1", "router2", "router3", "router4", "switch1"]
>>> devices.pop(3)
'router4'
>>> devices
["router1", "router2", "router3", "switch1"]

To remove an object itself from a list, use the remove method. The remove method has one parameter specifying the object you want to remove. The syntax is: remove(object_name).

>>> devices = ["router1", "router2", "router3", "router4", "switch1", "router1"]
>>> devices.remove("switch1")
>>> devices
["router1", "router2", "router3", "router4",  "router1"]

- 04

Finally, the count method returns the number of times a specified element appears in a list. The count method has one parameter, the object you want to count. The syntax is: count(object_name).

>>> devices = ["router1", "router2", "router3", "router4", "switch1", "router1"]
>>> devices.count("router1")
2

To check the total number of items in a list, use the len() function. The len() function shows the total number of items in a list, tuple, or set, the total number of characters in a string, or the total number of key-value pairs in a dictionary.

>>> len(devices)
6
