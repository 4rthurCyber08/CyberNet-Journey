 Whitespace and PEP 8

A Python Enhancement Proposal (PEP) is a document that describes a new feature for Python, its processes, or its environment. PEPs are the primary mechanisms for proposing significant new features, collecting community input on an issue, and documenting the design decisions that have gone into Python.
Python Enhancement Proposals

- 01

PEPs are similar to Requests for Comments (RFCs) associated with an active Internet Engineering Task Force (IETF) working group. Both are authored by individuals or groups within the community. Both PEPs and RFCs are documents that describe changes, features, processes, or behaviors. The difference between the documents is that RFCs are for changes to the Internet, and PEPs are for Python.

The primary audiences for PEPs are the core developers of the CPython reference interpreter, their elected Steering Council, and developers of other implementations of the Python language. CPython is the original implementation of Python that compiles your Python code into bytecode and then interprets the byte code into evaluation loops. It is called CPython to distinguish itself from the Python language and from other implementations of the language engine. However, other Python community groups may also choose to use the process to document expected API conventions and manage complex design coordination problems requiring collaboration across multiple projects.

There are three categories of PEP:

    Standards Track: Describes a new feature or implementation for Python.

    Informational PEP: Describes a Python design issue or provides general guidelines or information to the Python community but does not propose a new feature.

    Process PEP: Describes a process surrounding Python or proposes a change to a process. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Python development.

Let's look at two of the most common PEPs: PEP 8 and PEP 20.
PEP 8: Style Guide for Python Code

- 02

PEP 8 is a style guide, providing guidelines and best practices for writing Python code. It was written in 2001 by Guido van Rossum, Barry Warsaw, and Nick Coghlan to improve the readability and consistency of Python code. Van Rossum's key insight is that code is read more often than it is written. If you want to contribute to the Python community, it is essential to understand the guidelines for writing readable code.

Examples

- 03

The PEP 8 guidelines cover an extensive range of topics such as code layout, whitespaces, comments, and naming conventions.

The image and list include six examples of guidelines you will see in the PEP 8 document.

    Maximum Line Length: Limit all lines to a maximum of 79 characters.

    Line Break: Place line breaks before a binary operator. For decades, the recommended style was for a line break to be after the operator, but this was modified for readability purposes.

    Blank Lines: Surround top-level function and class definitions with two blank lines. A single blank line surrounds method definitions inside a class.

    Imports: List imports at the top of a file, with each import on a separate line.

    Naming: Write variable and function names in lowercase, with an underscore separating each word. In some fonts, characters are indistinguishable from the numerals one and zero. Never use the following characters as single-character variable names:

        'l' (lowercase letter el)

        'O' (uppercase letter oh)

        'I' (uppercase letter eye)

    Tab or Spaces: Use spaces. Only use tabs when you are trying to be consistent with prewritten code. Python 3 does not allow you to mix tabs and spaces.

PEP 8: Whitespace

- 04

Whitespaces make Python code more readable. There are different ways you can use whitespaces to increase readability. Let's look at a few examples.

Unlike other programming languages that use curly braces to denote blocks of code, Python uses indentation. Indentation, or leading whitespace, determines how Python statements are grouped. Following PEP 8 conventions, you should use four consecutive spaces to indicate indentation.

Whitespace should surround the following binary operators: assignment comparisons and Booleans.
PEP 8: Blank Lines

- 05

Blank lines can improve your code's readability, making it easier to read. Here are three examples of when to use blank lines:

    Surround top-level functions and classes with two blank lines.

    Surround method definitions inside classes with a single blank line.

    Use blank lines sparingly inside functions to show clear steps. 

Sometimes, adding whitespace can make code more difficult to read. Following are some examples of when not to use whitespaces:

    At the end of a line

    Immediately inside parentheses, brackets, or braces

    Before a comma, semicolon, or colon

    Between a trailing comma and a closing parenthesis

PEP 8: Checking Code for Conformity

- 06

Pycodestyle is the official linter tool to check Python code against PEP 8 style conventions. This package used to be called pep8 but was renamed to pycodestyle to reduce confusion.

To use pycodestyle, you must first install the package. From a terminal, run the command:

$ pip install pycodestyle

When the package installs, you are ready to check your scripts. To check a script against PEP 8, use the command:

$pycodestyle filename.py

Once pycodestyle checks your code, it will return a list of warnings or errors it found. The following is an example of a common error:

pep8check.py:4:2: E225 missing whitespace around operator

The 4 tells you the error is in line 4 and E225 is the error code. Any error code in the 200s is a whitespace error. The rest of the line gives a description of the error.

To learn more about pycodestyle and the error codes, visit the site https://pypi.org/project/pycodestyle/.

In the following topic, you will discuss the ability to do these checks in VS Code or other IDEs.